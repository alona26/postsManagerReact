{"ast":null,"code":"var _jsxFileName = \"C:\\\\NextProjects\\\\HelloWorld\\\\app-try\\\\src\\\\routes\\\\NewPost.js\",\n  _s = $RefreshSig$();\nimport classes from '../Components/Form.module.css';\nimport Modal from '../Components/Modal';\nimport { Link, Form, redirect, useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPost() {\n  _s();\n  const params = useParams();\n  // console.log(params); \n\n  useEffect(async () => {\n    // const fetchDataForEditing = async () => {\n    const response = await fetch('http://localhost:8080/posts/' + params.postId);\n    const resData = await response.json();\n    console.log(resData.post);\n    return resData.post;\n    // };\n    // fetchDataForEditing();\n  }, [params.postId]);\n  // console.log(data);\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          required: true,\n          rows: 3,\n          name: \"body\",\n          value: postData.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          required: true,\n          name: \"author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"..\",\n          className: classes.actions,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(NewPost, \"oVl/CosACDqoQXSsHMBk26cu/Mw=\", false, function () {\n  return [useParams];\n});\n_c = NewPost;\nexport default NewPost;\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  await fetch('http://localhost:8080/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: {\n      'content-Type': 'application/json'\n    }\n  });\n  return redirect('/');\n}\n\n// export async function editAction ({params}) {\n//     const postId = params['post-id']; // Fetch the postId from the URL params\n//     try {\n//       // Fetch post data based on postId (You may have your own API or method)\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch post data');\n//       }\n//       const postData = await response.json();\n\n//       // Return the populated data to be used in the PostForm component\n//       return {\n//         initialValues: {\n//           title: postData.title,\n//           content: postData.content,\n//           // Other fields you want to pre-fill in the form for editing\n//         }\n//       };\n//     } catch (error) {\n//       console.error('Error fetching post data:', error);\n//       return { initialValues: {} }; // Return empty initial values or handle error as needed\n//     }\n//   };\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["classes","Modal","Link","Form","redirect","useParams","useEffect","jsxDEV","_jsxDEV","NewPost","_s","params","response","fetch","postId","resData","json","console","log","post","children","method","className","form","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","required","rows","name","value","postData","body","type","actions","to","_c","action","request","formData","Object","fromEntries","JSON","stringify","headers","$RefreshReg$"],"sources":["C:/NextProjects/HelloWorld/app-try/src/routes/NewPost.js"],"sourcesContent":["import classes from '../Components/Form.module.css';\r\nimport Modal from '../Components/Modal';\r\nimport {Link, Form, redirect, useParams} from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\nfunction NewPost(){\r\n    const params = useParams();\r\n    // console.log(params); \r\n\r\n     useEffect(async() => {\r\n        // const fetchDataForEditing = async () => {\r\n            const response = await fetch('http://localhost:8080/posts/' + params.postId)\r\n        \r\n            const resData = await response.json();\r\n            console.log(resData.post)\r\n            return resData.post;\r\n        // };\r\n        // fetchDataForEditing();\r\n    },[params.postId]);\r\n    // console.log(data);\r\n\r\n    return (\r\n        <Modal>\r\n        <Form method='post' className={classes.form} >\r\n            <p >\r\n                <label htmlFor=\"body\">Text</label>\r\n                <textarea id=\"body\"  required rows={3} name = \"body\" value={postData.body}></textarea>\r\n            </p>\r\n            <p >\r\n                <label htmlFor=\"name\" >Your name</label>\r\n                <input type=\"text\" id=\"name\" required name=\"author\"/>\r\n            </p>\r\n            <p className={classes.actions}>\r\n            <Link to=\"..\" className={classes.actions} >Cancel</Link>\r\n            <button >Submit</button>\r\n            </p>\r\n     \r\n        </Form>\r\n        </Modal>\r\n    )\r\n}\r\nexport default NewPost;\r\n\r\nexport async function action({request}){\r\n    const formData = await request.formData();\r\n    const postData = Object.fromEntries(formData);\r\n    await fetch('http://localhost:8080/posts',{\r\n        method:'POST',\r\n        body:JSON.stringify(postData),\r\n        headers:{\r\n            'content-Type':'application/json'\r\n        },\r\n    });\r\n\r\n    return redirect('/');\r\n}\r\n\r\n// export async function editAction ({params}) {\r\n//     const postId = params['post-id']; // Fetch the postId from the URL params\r\n//     try {\r\n//       // Fetch post data based on postId (You may have your own API or method)\r\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch post data');\r\n//       }\r\n//       const postData = await response.json();\r\n  \r\n//       // Return the populated data to be used in the PostForm component\r\n//       return {\r\n//         initialValues: {\r\n//           title: postData.title,\r\n//           content: postData.content,\r\n//           // Other fields you want to pre-fill in the form for editing\r\n//         }\r\n//       };\r\n//     } catch (error) {\r\n//       console.error('Error fetching post data:', error);\r\n//       return { initialValues: {} }; // Return empty initial values or handle error as needed\r\n//     }\r\n//   };\r\n  \r\n"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,+BAA+B;AACnD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAAQC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,QAAO,kBAAkB;AAChE,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,OAAOA,CAAA,EAAE;EAAAC,EAAA;EACd,MAAMC,MAAM,GAAGN,SAAS,CAAC,CAAC;EAC1B;;EAECC,SAAS,CAAC,YAAW;IAClB;IACI,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,GAAGF,MAAM,CAACG,MAAM,CAAC;IAE5E,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC;IACzB,OAAOJ,OAAO,CAACI,IAAI;IACvB;IACA;EACJ,CAAC,EAAC,CAACR,MAAM,CAACG,MAAM,CAAC,CAAC;EAClB;;EAEA,oBACIN,OAAA,CAACP,KAAK;IAAAmB,QAAA,eACNZ,OAAA,CAACL,IAAI;MAACkB,MAAM,EAAC,MAAM;MAACC,SAAS,EAAEtB,OAAO,CAACuB,IAAK;MAAAH,QAAA,gBACxCZ,OAAA;QAAAY,QAAA,gBACIZ,OAAA;UAAOgB,OAAO,EAAC,MAAM;UAAAJ,QAAA,EAAC;QAAI;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClCpB,OAAA;UAAUqB,EAAE,EAAC,MAAM;UAAEC,QAAQ;UAACC,IAAI,EAAE,CAAE;UAACC,IAAI,EAAG,MAAM;UAACC,KAAK,EAAEC,QAAQ,CAACC;QAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvF,CAAC,eACJpB,OAAA;QAAAY,QAAA,gBACIZ,OAAA;UAAOgB,OAAO,EAAC,MAAM;UAAAJ,QAAA,EAAE;QAAS;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACxCpB,OAAA;UAAO4B,IAAI,EAAC,MAAM;UAACP,EAAE,EAAC,MAAM;UAACC,QAAQ;UAACE,IAAI,EAAC;QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACJpB,OAAA;QAAGc,SAAS,EAAEtB,OAAO,CAACqC,OAAQ;QAAAjB,QAAA,gBAC9BZ,OAAA,CAACN,IAAI;UAACoC,EAAE,EAAC,IAAI;UAAChB,SAAS,EAAEtB,OAAO,CAACqC,OAAQ;UAAAjB,QAAA,EAAE;QAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxDpB,OAAA;UAAAY,QAAA,EAAS;QAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEhB;AAAClB,EAAA,CAnCQD,OAAO;EAAA,QACGJ,SAAS;AAAA;AAAAkC,EAAA,GADnB9B,OAAO;AAoChB,eAAeA,OAAO;AAEtB,OAAO,eAAe+B,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAC;EACnC,MAAMC,QAAQ,GAAG,MAAMD,OAAO,CAACC,QAAQ,CAAC,CAAC;EACzC,MAAMR,QAAQ,GAAGS,MAAM,CAACC,WAAW,CAACF,QAAQ,CAAC;EAC7C,MAAM7B,KAAK,CAAC,6BAA6B,EAAC;IACtCQ,MAAM,EAAC,MAAM;IACbc,IAAI,EAACU,IAAI,CAACC,SAAS,CAACZ,QAAQ,CAAC;IAC7Ba,OAAO,EAAC;MACJ,cAAc,EAAC;IACnB;EACJ,CAAC,CAAC;EAEF,OAAO3C,QAAQ,CAAC,GAAG,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAmC,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}