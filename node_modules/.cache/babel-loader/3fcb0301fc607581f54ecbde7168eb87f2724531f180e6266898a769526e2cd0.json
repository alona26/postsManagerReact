{"ast":null,"code":"var _jsxFileName = \"C:\\\\NextProjects\\\\HelloWorld\\\\app-try\\\\src\\\\Components\\\\ListPost.js\",\n  _s = $RefreshSig$();\nimport Post from './Post';\nimport classes from './ListPost.module.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ListPost() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [isFetching, setFetching] = useState(false);\n\n  // useEffect(()=>{\n  //     async function fetchPosts(){\n  //     const res = await fetch('http://lecalhost:8080/posts')\n  //     const resData = await res.json();\n  //     setPosts(resData.posts);\n  //     setFetching(false);\n  //     }\n  // fetchPosts();\n  // }, []);\n  useEffect(() => {\n    async function fetchPosts() {\n      try {\n        const res = await fetch('http://localhost:8080/posts');\n        if (!res.ok) {\n          throw new Error('Failed to fetch posts');\n        }\n        const resData = await res.json();\n        setPosts(resData.posts);\n        setFetching(false);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n        // Handle error state or display an error message\n      }\n    }\n    fetchPosts();\n  }, []);\n\n  // function addPostHandler(postData){\n  //     fetch('http://localhost:8080/posts',{\n  //         method:'POST',\n  //         body:JSON.stringify(postData),\n  //         headers:{\n  //             'content-Type':'application/json'\n  //         }\n  // });\n  //     setPosts((existingPost)=>[postData,...existingPost]);\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isFetching && posts.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        author: post.author,\n        body: post.body\n      }, post.body, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        color: 'white'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ther are no posts yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Start adding some!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading posts!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n}\n_s(ListPost, \"aWIz4gyac05ZYOU8a4013lJ4u1E=\");\n_c = ListPost;\nexport default ListPost;\nvar _c;\n$RefreshReg$(_c, \"ListPost\");","map":{"version":3,"names":["Post","classes","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ListPost","_s","posts","setPosts","isFetching","setFetching","fetchPosts","res","fetch","ok","Error","resData","json","error","console","children","length","className","list","map","post","author","body","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","color","_c","$RefreshReg$"],"sources":["C:/NextProjects/HelloWorld/app-try/src/Components/ListPost.js"],"sourcesContent":["import Post from './Post';\r\nimport classes from './ListPost.module.css'\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction ListPost(){\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [isFetching,setFetching] = useState(false);\r\n\r\n    // useEffect(()=>{\r\n    //     async function fetchPosts(){\r\n    //     const res = await fetch('http://lecalhost:8080/posts')\r\n    //     const resData = await res.json();\r\n    //     setPosts(resData.posts);\r\n    //     setFetching(false);\r\n    //     }\r\n    // fetchPosts();\r\n    // }, []);\r\n    useEffect(() => {\r\n        async function fetchPosts() {\r\n          try {\r\n            const res = await fetch('http://localhost:8080/posts');\r\n            if (!res.ok) {\r\n              throw new Error('Failed to fetch posts');\r\n            }\r\n            const resData = await res.json();\r\n            setPosts(resData.posts);\r\n            setFetching(false);\r\n          } catch (error) {\r\n            console.error('Error fetching posts:', error);\r\n            // Handle error state or display an error message\r\n          }\r\n        }\r\n        fetchPosts();\r\n      }, []);\r\n      \r\n    // function addPostHandler(postData){\r\n    //     fetch('http://localhost:8080/posts',{\r\n    //         method:'POST',\r\n    //         body:JSON.stringify(postData),\r\n    //         headers:{\r\n    //             'content-Type':'application/json'\r\n    //         }\r\n    // });\r\n    //     setPosts((existingPost)=>[postData,...existingPost]);\r\n    // }\r\n    return (\r\n        <>\r\n        {! isFetching && posts.length>0 ?\r\n        <ul className = {classes.list}>\r\n            {posts.map((post)=><Post key= {post.body} author = {post.author} body = {post.body}/>)}\r\n        </ul>\r\n        :\r\n        <div style={{textAlign:'center',color:'white'}}>\r\n        <h2>Ther are no posts yet</h2>\r\n        <p>Start adding some!</p>\r\n        </div>\r\n}\r\n{isFetching && <div style={{textAlign:'center',color:'white'}}>\r\n        <p>Loading posts!</p>\r\n        </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\nexport default ListPost;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}