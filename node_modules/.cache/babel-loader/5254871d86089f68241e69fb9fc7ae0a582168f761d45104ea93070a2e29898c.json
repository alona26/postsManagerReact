{"ast":null,"code":"var _jsxFileName = \"C:\\\\NextProjects\\\\HelloWorld\\\\app-try\\\\src\\\\routes\\\\NewPost.js\",\n  _s = $RefreshSig$();\nimport classes from '../Components/Form.module.css';\nimport Modal from '../Components/Modal';\nimport { Link, Form, redirect } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPost(params) {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    content: ''\n    // Other fields you want to pre-fill in the form for editing\n  });\n  useEffect(() => {\n    const params = fetch(`/api/posts/${postId}`);\n    editAction({\n      params\n    }).then(data => {\n      setFormData(data.initialValues); // Update form fields with fetched data\n    }).catch(error => {\n      console.error('Error fetching post data:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          required: true,\n          rows: 3,\n          name: \"body\",\n          value: formData.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          required: true,\n          name: \"author\",\n          value: formData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"..\",\n          className: classes.actions,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_s(NewPost, \"tj6PSof3vdwyTTTn8z/BNf+za/o=\");\n_c = NewPost;\nexport default NewPost;\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  await fetch('http://localhost:8080/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: {\n      'content-Type': 'application/json'\n    }\n  });\n  return redirect('/');\n}\n\n// export async function editAction ({params}) {\n//     const postId = params['post-id']; // Fetch the postId from the URL params\n//       // Fetch post data based on postId (You may have your own API or method)\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\n//       const postData = await response.json();\n\n//       // Return the populated data to be used in the PostForm component\n//       return {\n//         initialValues: {\n//           title: postData.title,\n//           content: postData.content,\n//           // Other fields you want to pre-fill in the form for editing\n//         }\n//       };\n//   };\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["classes","Modal","Link","Form","redirect","useState","useEffect","jsxDEV","_jsxDEV","NewPost","params","_s","formData","setFormData","title","content","fetch","postId","editAction","then","data","initialValues","catch","error","console","children","method","className","form","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","required","rows","name","value","type","actions","to","_c","action","request","postData","Object","fromEntries","body","JSON","stringify","headers","$RefreshReg$"],"sources":["C:/NextProjects/HelloWorld/app-try/src/routes/NewPost.js"],"sourcesContent":["import classes from '../Components/Form.module.css';\r\nimport Modal from '../Components/Modal';\r\nimport {Link, Form, redirect} from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nfunction NewPost(params){\r\n    const [formData, setFormData] = useState({\r\n        title: '',\r\n        content: '',\r\n        // Other fields you want to pre-fill in the form for editing\r\n      });\r\n    \r\n      useEffect(() => {\r\n        const params = fetch(`/api/posts/${postId}`);\r\n        editAction({ params })\r\n          .then((data) => {\r\n            setFormData(data.initialValues); // Update form fields with fetched data\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error fetching post data:', error);\r\n          });\r\n      }, []);\r\n\r\n    return (\r\n        <Modal>\r\n        <Form method='post' className={classes.form} >\r\n            <p >\r\n                <label htmlFor=\"body\">Text</label>\r\n                <textarea id=\"body\"  required rows={3} name = \"body\" value={formData.content}></textarea>\r\n            </p>\r\n            <p >\r\n                <label htmlFor=\"name\" >Your name</label>\r\n                <input type=\"text\" id=\"name\" required name=\"author\" value={formData.title}/>\r\n            </p>\r\n            <p className={classes.actions}>\r\n            <Link to=\"..\" className={classes.actions} >Cancel</Link>\r\n            <button >Submit</button>\r\n            </p>\r\n     \r\n        </Form>\r\n        </Modal>\r\n    )\r\n}\r\nexport default NewPost;\r\n\r\nexport async function action({request}){\r\n    const formData = await request.formData();\r\n    const postData = Object.fromEntries(formData);\r\n    await fetch('http://localhost:8080/posts',{\r\n        method:'POST',\r\n        body:JSON.stringify(postData),\r\n        headers:{\r\n            'content-Type':'application/json'\r\n        },\r\n    });\r\n\r\n    return redirect('/');\r\n}\r\n\r\n// export async function editAction ({params}) {\r\n//     const postId = params['post-id']; // Fetch the postId from the URL params\r\n//       // Fetch post data based on postId (You may have your own API or method)\r\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\r\n//       const postData = await response.json();\r\n  \r\n//       // Return the populated data to be used in the PostForm component\r\n//       return {\r\n//         initialValues: {\r\n//           title: postData.title,\r\n//           content: postData.content,\r\n//           // Other fields you want to pre-fill in the form for editing\r\n//         }\r\n//       };\r\n//   };\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}