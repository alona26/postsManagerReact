{"ast":null,"code":"var _jsxFileName = \"C:\\\\NextProjects\\\\HelloWorld\\\\app-try\\\\src\\\\routes\\\\NewPost.js\",\n  _s = $RefreshSig$();\nimport classes from '../Components/Form.module.css';\nimport Modal from '../Components/Modal';\nimport { Link, Form } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\n// Import your editAction function\nimport { editAction } from './path/to/editAction'; // Update with the correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPost(props) {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    content: ''\n    // Other fields you want to pre-fill in the form for editing\n  });\n  useEffect(() => {\n    const postId = props.match.params['post-id']; // Get postId from route parameters\n    editAction({\n      'post-id': postId\n    }) // Pass postId to editAction\n    .then(data => {\n      setFormData(data.initialValues); // Update form fields with fetched data\n    }).catch(error => {\n      console.error('Error fetching post data:', error);\n    });\n  }, [props.match.params]); // Ensure this effect runs when route parameters change\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          required: true,\n          rows: 3,\n          name: \"body\",\n          value: formData.content,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          required: true,\n          name: \"author\",\n          value: formData.title,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"..\",\n          className: classes.actions,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(NewPost, \"svhPsqY+pujB3ZtXK3/pEAn/IsI=\");\n_c = NewPost;\nexport default NewPost;\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  await fetch('http://localhost:8080/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: {\n      'content-Type': 'application/json'\n    }\n  });\n  return redirect('/');\n}\n\n// export async function editAction ({params}) {\n//     const postId = params['post-id']; // Fetch the postId from the URL params\n//       // Fetch post data based on postId (You may have your own API or method)\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\n//       const postData = await response.json();\n\n//       // Return the populated data to be used in the PostForm component\n//       return {\n//         initialValues: {\n//           title: postData.title,\n//           content: postData.content,\n//           // Other fields you want to pre-fill in the form for editing\n//         }\n//       };\n//   };\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["classes","Modal","Link","Form","useState","useEffect","editAction","jsxDEV","_jsxDEV","NewPost","props","_s","formData","setFormData","title","content","postId","match","params","then","data","initialValues","catch","error","console","children","method","className","form","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","required","rows","name","value","readOnly","type","actions","to","_c","action","request","postData","Object","fromEntries","fetch","body","JSON","stringify","headers","redirect","$RefreshReg$"],"sources":["C:/NextProjects/HelloWorld/app-try/src/routes/NewPost.js"],"sourcesContent":["import classes from '../Components/Form.module.css';\r\nimport Modal from '../Components/Modal';\r\nimport { Link, Form } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Import your editAction function\r\nimport { editAction } from './path/to/editAction'; // Update with the correct path\r\n\r\nfunction NewPost(props) {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    content: '',\r\n    // Other fields you want to pre-fill in the form for editing\r\n  });\r\n\r\n  useEffect(() => {\r\n    const postId = props.match.params['post-id']; // Get postId from route parameters\r\n    editAction({ 'post-id': postId }) // Pass postId to editAction\r\n      .then((data) => {\r\n        setFormData(data.initialValues); // Update form fields with fetched data\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching post data:', error);\r\n      });\r\n  }, [props.match.params]); // Ensure this effect runs when route parameters change\r\n\r\n  return (\r\n    <Modal>\r\n      <Form method='post' className={classes.form}>\r\n        <p>\r\n          <label htmlFor=\"body\">Text</label>\r\n          <textarea id=\"body\" required rows={3} name=\"body\" value={formData.content} readOnly></textarea>\r\n        </p>\r\n        <p>\r\n          <label htmlFor=\"name\">Your name</label>\r\n          <input type=\"text\" id=\"name\" required name=\"author\" value={formData.title} readOnly />\r\n        </p>\r\n        <p className={classes.actions}>\r\n          <Link to=\"..\" className={classes.actions}>Cancel</Link>\r\n          <button>Submit</button>\r\n        </p>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default NewPost;\r\n\r\nexport async function action({request}){\r\n    const formData = await request.formData();\r\n    const postData = Object.fromEntries(formData);\r\n    await fetch('http://localhost:8080/posts',{\r\n        method:'POST',\r\n        body:JSON.stringify(postData),\r\n        headers:{\r\n            'content-Type':'application/json'\r\n        },\r\n    });\r\n\r\n    return redirect('/');\r\n}\r\n\r\n// export async function editAction ({params}) {\r\n//     const postId = params['post-id']; // Fetch the postId from the URL params\r\n//       // Fetch post data based on postId (You may have your own API or method)\r\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\r\n//       const postData = await response.json();\r\n  \r\n//       // Return the populated data to be used in the PostForm component\r\n//       return {\r\n//         initialValues: {\r\n//           title: postData.title,\r\n//           content: postData.content,\r\n//           // Other fields you want to pre-fill in the form for editing\r\n//         }\r\n//       };\r\n//   };\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}