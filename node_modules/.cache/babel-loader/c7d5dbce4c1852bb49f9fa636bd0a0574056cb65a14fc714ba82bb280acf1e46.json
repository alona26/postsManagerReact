{"ast":null,"code":"var _jsxFileName = \"C:\\\\NextProjects\\\\HelloWorld\\\\app-try\\\\src\\\\routes\\\\NewPost.js\";\nimport classes from '../Components/Form.module.css';\nimport Modal from '../Components/Modal';\nimport { Link, Form, redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewPost() {\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          required: true,\n          rows: 3,\n          name: \"body\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          required: true,\n          name: \"author\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"..\",\n          className: classes.actions,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_c = NewPost;\nexport default NewPost;\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const postData = Object.fromEntries(formData);\n  await fetch('http://localhost:8080/posts', {\n    method: 'POST',\n    body: JSON.stringify(postData),\n    headers: {\n      'content-Type': 'application/json'\n    }\n  });\n  return redirect('/');\n}\n\n// export async function editAction ({params}) {\n//     const postId = params['post-id']; // Fetch the postId from the URL params\n//     try {\n//       // Fetch post data based on postId (You may have your own API or method)\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch post data');\n//       }\n//       const postData = await response.json();\n\n//       // Return the populated data to be used in the PostForm component\n//       return {\n//         initialValues: {\n//           title: postData.title,\n//           content: postData.content,\n//           // Other fields you want to pre-fill in the form for editing\n//         }\n//       };\n//     } catch (error) {\n//       console.error('Error fetching post data:', error);\n//       return { initialValues: {} }; // Return empty initial values or handle error as needed\n//     }\n//   };\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["classes","Modal","Link","Form","redirect","jsxDEV","_jsxDEV","NewPost","children","method","className","form","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","required","rows","name","type","actions","to","_c","action","request","formData","postData","Object","fromEntries","fetch","body","JSON","stringify","headers","$RefreshReg$"],"sources":["C:/NextProjects/HelloWorld/app-try/src/routes/NewPost.js"],"sourcesContent":["import classes from '../Components/Form.module.css';\r\nimport Modal from '../Components/Modal';\r\nimport {Link, Form, redirect} from 'react-router-dom';\r\n\r\n\r\nfunction NewPost(){\r\n\r\n    return (\r\n        <Modal>\r\n        <Form method='post' className={classes.form} >\r\n            <p >\r\n                <label htmlFor=\"body\">Text</label>\r\n                <textarea id=\"body\"  required rows={3} name = \"body\"></textarea>\r\n            </p>\r\n            <p >\r\n                <label htmlFor=\"name\" >Your name</label>\r\n                <input type=\"text\" id=\"name\" required name=\"author\"/>\r\n            </p>\r\n            <p className={classes.actions}>\r\n            <Link to=\"..\" className={classes.actions} >Cancel</Link>\r\n            <button >Submit</button>\r\n            </p>\r\n     \r\n        </Form>\r\n        </Modal>\r\n    )\r\n}\r\nexport default NewPost;\r\n\r\nexport async function action({request}){\r\n    const formData = await request.formData();\r\n    const postData = Object.fromEntries(formData);\r\n    await fetch('http://localhost:8080/posts',{\r\n        method:'POST',\r\n        body:JSON.stringify(postData),\r\n        headers:{\r\n            'content-Type':'application/json'\r\n        },\r\n    });\r\n\r\n    return redirect('/');\r\n}\r\n\r\n// export async function editAction ({params}) {\r\n//     const postId = params['post-id']; // Fetch the postId from the URL params\r\n//     try {\r\n//       // Fetch post data based on postId (You may have your own API or method)\r\n//       const response = await fetch(`/api/posts/${postId}`); // Replace with your API endpoint\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch post data');\r\n//       }\r\n//       const postData = await response.json();\r\n  \r\n//       // Return the populated data to be used in the PostForm component\r\n//       return {\r\n//         initialValues: {\r\n//           title: postData.title,\r\n//           content: postData.content,\r\n//           // Other fields you want to pre-fill in the form for editing\r\n//         }\r\n//       };\r\n//     } catch (error) {\r\n//       console.error('Error fetching post data:', error);\r\n//       return { initialValues: {} }; // Return empty initial values or handle error as needed\r\n//     }\r\n//   };\r\n  \r\n"],"mappings":";AAAA,OAAOA,OAAO,MAAM,+BAA+B;AACnD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAAQC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtD,SAASC,OAAOA,CAAA,EAAE;EAEd,oBACID,OAAA,CAACL,KAAK;IAAAO,QAAA,eACNF,OAAA,CAACH,IAAI;MAACM,MAAM,EAAC,MAAM;MAACC,SAAS,EAAEV,OAAO,CAACW,IAAK;MAAAH,QAAA,gBACxCF,OAAA;QAAAE,QAAA,gBACIF,OAAA;UAAOM,OAAO,EAAC,MAAM;UAAAJ,QAAA,EAAC;QAAI;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClCV,OAAA;UAAUW,EAAE,EAAC,MAAM;UAAEC,QAAQ;UAACC,IAAI,EAAE,CAAE;UAACC,IAAI,EAAG;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC,eACJV,OAAA;QAAAE,QAAA,gBACIF,OAAA;UAAOM,OAAO,EAAC,MAAM;UAAAJ,QAAA,EAAE;QAAS;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACxCV,OAAA;UAAOe,IAAI,EAAC,MAAM;UAACJ,EAAE,EAAC,MAAM;UAACC,QAAQ;UAACE,IAAI,EAAC;QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACJV,OAAA;QAAGI,SAAS,EAAEV,OAAO,CAACsB,OAAQ;QAAAd,QAAA,gBAC9BF,OAAA,CAACJ,IAAI;UAACqB,EAAE,EAAC,IAAI;UAACb,SAAS,EAAEV,OAAO,CAACsB,OAAQ;UAAAd,QAAA,EAAE;QAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxDV,OAAA;UAAAE,QAAA,EAAS;QAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEhB;AAACQ,EAAA,GArBQjB,OAAO;AAsBhB,eAAeA,OAAO;AAEtB,OAAO,eAAekB,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAC;EACnC,MAAMC,QAAQ,GAAG,MAAMD,OAAO,CAACC,QAAQ,CAAC,CAAC;EACzC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,WAAW,CAACH,QAAQ,CAAC;EAC7C,MAAMI,KAAK,CAAC,6BAA6B,EAAC;IACtCtB,MAAM,EAAC,MAAM;IACbuB,IAAI,EAACC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC;IAC7BO,OAAO,EAAC;MACJ,cAAc,EAAC;IACnB;EACJ,CAAC,CAAC;EAEF,OAAO/B,QAAQ,CAAC,GAAG,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAoB,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}